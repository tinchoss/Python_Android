These steps were tested on Ubuntu Karmic 64-bit.

1. Download and build the Android source and use the Donut branch:

repo init -u git://android.git.kernel.org/platform/manifest.git -b donut

On Karmic, you'll need to slightly modify your string.h:

http://codepainters.wordpress.com/2009/12/18/first-android-platform-build/

2. Download the Python 2.6 source (i.e not the patched Python source provided here).
3. Build Python for your host (i.e. not your Android device) by following the Python build instructions (configure, make).
4. Copy the built binary python_src/Parser/pgen from there to ase_trunk/python/src/Parser/hostpgen.
5. Copy the built binary python_src/python from there to sl4a_trunk/python/src/hostpython.
6. Execute build.py from the ase_trunk/python directory to cross compile Python for use with ASE (SL4A).

Additional notes:
The build script needs to be able to find agcc and arm-eabi-gcc.
There are several versions of arm-eabi-gcc in the android source distribution. I chose 4.4.0 as the latest.
Add to the path:
 <PATH_TO_ANDROID_SCRIPTING>/tools/agcc
 <PATH_TO_ANDROID_SOURCE>/prebuilt/linux-x86/toolchain/arm-eabi-4.4.0/bin

(on my computer, this translated as: 
  export PATH=$PATH:~/androidsource/prebuilt/linux-x86/toolchain/arm-eabi-4.4.0/bin:~/android-scripting/tools/agcc
)

Find "prefix=" in python_src/src/Makefile, and make it = <PATH_TO_ANDROID_SCRIPTING>/python/src/android/python
If you are having problems, I suggest modifying build.py from "make install -k" to "make install" ... the -k causes make to try to ignore errors, which actually made it harder to debug.


